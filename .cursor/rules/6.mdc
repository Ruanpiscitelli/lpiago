---
description: SEO & Meta Tag Strategy
globs: 
alwaysApply: true
---
# SEO & Meta Tag Strategy for Astro Projects

## Core SEO Infrastructure

### Head Tag Management
- Leverage Astro's built-in `<head>` tag management for declarative meta information
- Implement structured data (JSON-LD) for enhanced search result features
- Create page-specific title templates with brand consistency: `{pageName} | {brandName}`
- Set up dynamic meta descriptions based on page content
- Implement proper Open Graph and Twitter Card meta tags with fallback images

```astro
<head>
  <title>{frontmatter.title ? `${frontmatter.title} | YourBrand` : 'YourBrand'}</title>
  <meta name="description" content={frontmatter.description || defaultDescription} />
  <meta property="og:image" content={Astro.site + (frontmatter.image || 'default-og.jpg')} />
  <link rel="canonical" href={new URL(Astro.url.pathname, Astro.site).toString()} />
</head>
```

### Canonical URL Implementation
- Generate absolute URLs for all canonical references
- Handle pagination scenarios with proper `rel="next"` and `rel="prev"` links
- Create intelligent canonical references for similar content
- Implement hreflang tags for multilingual sites with proper language variants
- Ensure canonical URLs resolve trailing slashes consistently

```astro
<!-- For paginated content -->
<link rel="canonical" href={new URL(Astro.url.pathname.replace(/\/page\/\d+/, ''), Astro.site).toString()} />
{prev && <link rel="prev" href={new URL(prev, Astro.site).toString()} />}
{next && <link rel="next" href={new URL(next, Astro.site).toString()} />}
```

## Reusable SEO Component Architecture

### Core SEO Component
- Create a comprehensive `<SEO>` component with standardized props
- Implement intelligent defaults for all meta properties
- Build in schema.org structured data generation
- Create specialized variants for different content types (Article, Product, Event)
- Include fallback mechanisms for missing data

```astro
---
// SEO.astro
export interface Props {
  title?: string;
  description?: string;
  canonicalURL?: URL | string;
  image?: {
    url: string;
    alt: string;
    width?: number;
    height?: number;
  };
  type?: 'website' | 'article' | 'product';
  publishDate?: Date;
  modifiedDate?: Date;
  author?: string;
}

const {
  title = "Default Title",
  description = "Default site description",
  canonicalURL = new URL(Astro.url.pathname, Astro.site),
  image,
  type = "website",
  publishDate,
  modifiedDate,
  author,
} = Astro.props;

const ogImage = image?.url || `/default-og.jpg`;
---

<!-- Base Meta Tags -->
<title>{title}</title>
<meta name="description" content={description} />
<link rel="canonical" href={canonicalURL} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={type} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(ogImage, Astro.site)} />
{image?.width && <meta property="og:image:width" content={image.width.toString()} />}
{image?.height && <meta property="og:image:height" content={image.height.toString()} />}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(ogImage, Astro.site)} />

<!-- Article Specific -->
{type === 'article' && publishDate && (
  <meta property="article:published_time" content={publishDate.toISOString()} />
)}
{type === 'article' && modifiedDate && (
  <meta property="article:modified_time" content={modifiedDate.toISOString()} />
)}
{type === 'article' && author && (
  <meta property="article:author" content={author} />
)}

<!-- Schema.org structured data -->
<script type="application/ld+json" set:html={JSON.stringify({
  "@context": "https://schema.org",
  "@type": type === 'article' ? 'Article' : (type === 'product' ? 'Product' : 'WebPage'),
  "headline": title,
  "description": description,
  "image": new URL(ogImage, Astro.site).toString(),
  ...( type === 'article' && publishDate ? {
    "datePublished": publishDate.toISOString(),
    "dateModified": modifiedDate ? modifiedDate.toISOString() : publishDate.toISOString(),
    "author": {
      "@type": "Person",
      "name": author || "Site Author"
    }
  } : {})
})} />
```

## Advanced SEO Techniques

### Content Optimization
- Implement automatic heading hierarchy validation
- Create intelligent internal linking suggestions
- Generate XML sitemaps with priority and change frequency attributes
- Implement breadcrumb navigation with structured data
- Add semantic HTML enhancements for content sections

### Technical SEO Implementation
- Configure proper HTTP headers for SEO (X-Robots-Tag)
- Implement page speed optimizations (Core Web Vitals)
- Create preconnect and dns-prefetch resource hints
- Configure meta robots tags dynamically based on content state
- Set up detailed SEO monitoring and reporting

### Local SEO Enhancement
- Implement location-specific schema markup
- Create dynamic store locator with structured data
- Configure proper hreflang tags for multi-regional sites
- Implement local business schema with operating hours

## SEO Testing & Monitoring
- Create automated testing for critical SEO elements
- Implement Lighthouse CI for performance and SEO scoring
- Set up monitoring for broken canonical links
- Track organic search position for target keywords
- Create automated schema validation during build process

This comprehensive SEO strategy should be integrated throughout your Astro project, with the SEO component used consistently across all page templates to ensure maximum search visibility and performance.