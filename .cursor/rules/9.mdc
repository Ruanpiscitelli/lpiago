---
description: Code Standards & Style Guidelines
globs: 
alwaysApply: false
---
# Key Conventions for Astro Projects

## Code Standards & Style Guidelines

### Astro Style Guide Implementation
- Follow strict naming conventions:
  - Components: PascalCase (e.g., `NavigationBar.astro`)
  - Utilities: camelCase (e.g., `formatDate.js`)
  - CSS files: kebab-case (e.g., `button-styles.css`)
- Structure project with clear domain separation:
  ```
  src/
  ├── components/
  │   ├── common/
  │   ├── layout/
  │   └── features/
  ├── layouts/
  ├── pages/
  ├── utils/
  └── styles/
  ```
- Implement comprehensive code formatting with Prettier:
  ```json
  // .prettierrc
  {
    "printWidth": 100,
    "tabWidth": 2,
    "useTabs": false,
    "semi": true,
    "singleQuote": true,
    "trailingComma": "all",
    "bracketSpacing": true,
    "endOfLine": "lf",
    "plugins": ["prettier-plugin-astro"],
    "overrides": [
      {
        "files": "*.astro",
        "options": {
          "parser": "astro"
        }
      }
    ]
  }
  ```
- Configure ESLint with Astro-specific rules:
  ```javascript
  // .eslintrc.cjs
  module.exports = {
    extends: [
      'eslint:recommended',
      'plugin:astro/recommended',
      'plugin:@typescript-eslint/recommended',
    ],
    overrides: [
      {
        files: ['*.astro'],
        parser: 'astro-eslint-parser',
        parserOptions: {
          parser: '@typescript-eslint/parser',
          extraFileExtensions: ['.astro'],
        },
        rules: {
          // Astro-specific rules
        },
      },
    ],
  };
  ```

## TypeScript Integration

### Type-Safe Development
- Configure strict TypeScript settings for maximum safety:
  ```json
  // tsconfig.json
  {
    "extends": "astro/tsconfigs/strict",
    "compilerOptions": {
      "baseUrl": ".",
      "paths": {
        "@components/*": ["src/components/*"],
        "@layouts/*": ["src/layouts/*"],
        "@utils/*": ["src/utils/*"]
      },
      "strictNullChecks": true,
      "noImplicitAny": true,
      "strictFunctionTypes": true,
      "strictBindCallApply": true
    }
  }
  ```
- Create dedicated type definitions for all component props:
  ```typescript
  // src/types/components.ts
  export interface CardProps {
    title: string;
    description: string;
    image?: {
      src: string;
      alt: string;
      width: number;
      height: number;
    };
    link?: {
      url: string;
      text: string;
    };
  }
  ```
- Implement type-safe data fetching with Zod validation:
  ```typescript
  import { z } from 'zod';
  
  const PostSchema = z.object({
    id: z.number(),
    title: z.string(),
    content: z.string(),
    publishedAt: z.string().pipe(z.coerce.date())
  });
  
  type Post = z.infer<typeof PostSchema>;
  
  async function fetchPost(id: number): Promise<Post> {
    const response = await fetch(`/api/posts/${id}`);
    const data = await response.json();
    return PostSchema.parse(data);
  }
  ```
- Use TypeScript for API contracts and Content Collections schemas

## Error Management Framework

### Comprehensive Error Handling
- Implement structured error boundaries for different contexts:
  ```astro
  ---
  // ErrorBoundary.astro
  import { isServerError } from '../utils/errors';
  
  const { fallback } = Astro.props;
  
  let errorContent = null;
  try {
    errorContent = await Astro.slots.render('default');
  } catch (error) {
    console.error('Error rendering content:', error);
    return fallback || <p>Something went wrong. Please try again later.</p>;
  }
  ---
  
  {errorContent}
  ```
- Create standardized error logging service:
  ```typescript
  // src/services/logger.ts
  type LogLevel = 'info' | 'warn' | 'error';
  
  export function log(level: LogLevel, message: string, data?: Record<string, unknown>) {
    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      level,
      message,
      ...(data && { data }),
    };
    
    // Development logging
    if (import.meta.env.DEV) {
      console[level](mdc:message, data);
    }
    
    // Production logging (e.g., to service)
    if (import.meta.env.PROD) {
      // Send to logging service
    }
    
    return logEntry;
  }
  ```
- Implement custom error types for domain-specific issues:
  ```typescript
  // src/utils/errors.ts
  export class NetworkError extends Error {
    constructor(message: string, public response?: Response) {
      super(message);
      this.name = 'NetworkError';
    }
  }
  
  export class ValidationError extends Error {
    constructor(message: string, public fields: Record<string, string[]>) {
      super(message);
      this.name = 'ValidationError';
    }
  }
  ```
- Set up global error tracking and reporting

## Content Optimization

### RSS Feed Generation
- Implement structured RSS generation for content types:
  ```typescript
  // src/pages/rss.xml.ts
  import rss from '@astrojs/rss';
  import { getCollection } from 'astro:content';
  import { SITE_TITLE, SITE_DESCRIPTION } from '../config';
  
  export async function get(context) {
    const posts = await getCollection('blog');
    
    return rss({
      title: SITE_TITLE,
      description: SITE_DESCRIPTION,
      site: context.site,
      items: posts.map((post) => ({
        title: post.data.title,
        pubDate: post.data.publishedAt,
        description: post.data.excerpt,
        link: `/blog/${post.slug}/`,
        content: post.data.content,
        categories: post.data.tags,
      })),
      customData: `<language>en-us</language>`,
      stylesheet: '/rss/styles.xsl',
    });
  }
  ```
- Create category-specific RSS feeds for content segmentation
- Implement podcast-compatible RSS extensions for media content
- Configure autodiscovery links for RSS feeds:
  ```html
  <link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml" />
  <link rel="alternate" type="application/atom+xml" title="Atom" href="/atom.xml" />
  ```

### Image Optimization System
- Implement comprehensive image component with art direction:
  ```astro
  ---
  // OptimizedImage.astro
  import { Image } from '@astrojs/image/components';
  
  interface Props {
    src: string;
    alt: string;
    widths: number[];
    sizes: string;
    loading?: 'lazy' | 'eager';
    format?: 'avif' | 'webp' | 'png' | 'jpg';
    fit?: 'cover' | 'contain' | 'fill';
    position?: 'center' | 'top' | 'bottom';
    background?: string;
  }
  
  const {
    src,
    alt,
    widths,
    sizes,
    loading = 'lazy',
    format = 'webp',
    fit = 'cover',
    position = 'center',
    background,
  } = Astro.props;
  ---
  
  <Image
    src={src}
    alt={alt}
    widths={widths}
    sizes={sizes}
    loading={loading}
    format={format}
    fit={fit}
    position={position}
    background={background}
  />
  ```
- Configure adaptive image serving based on viewport and connection
- Implement LQIP (Low Quality Image Placeholders) for improved perceived performance
- Create responsive image hooks for React/Vue/Svelte components
- Set up image transformation pipelines for consistent processing

## Development Workflow Enhancements

### Automated Testing Framework
- Implement comprehensive testing strategy:
  - Unit tests with Vitest for utilities and helpers
  - Component tests with Testing Library for UI components
  - End-to-end tests with Playwright for critical user flows
  - Visual regression tests with Percy or Chromatic
- Configure integration with CI/CD for automated test execution
- Implement performance regression testing with Lighthouse CI

### Documentation Standards
- Create component documentation with Storybook or similar:
  ```typescript
  // Button.stories.ts
  import type { Meta, StoryObj } from '@storybook/react';
  import { Button } from './Button';
  
  const meta: Meta<typeof Button> = {
    component: Button,
    tags: ['autodocs'],
    parameters: {
      layout: 'centered',
    },
  };
  
  export default meta;
  type Story = StoryObj<typeof Button>;
  
  export const Primary: Story = {
    args: {
      variant: 'primary',
      label: 'Button',
    },
  };
  ```
- Implement JSDoc comments for all utilities and helpers
- Create living style guide for design system components
- Document API contracts and data models

This comprehensive guide establishes clear conventions for Astro projects, ensuring consistency, performance, and maintainability across development teams and project lifecycles.