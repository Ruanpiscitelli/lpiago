# Configurações para compressão de arquivos
<IfModule mod_deflate.c>
  # Ativa a compressão para os seguintes tipos MIME
  AddOutputFilterByType DEFLATE application/javascript
  AddOutputFilterByType DEFLATE application/json
  AddOutputFilterByType DEFLATE application/x-javascript
  AddOutputFilterByType DEFLATE application/xml
  AddOutputFilterByType DEFLATE text/css
  AddOutputFilterByType DEFLATE text/html
  AddOutputFilterByType DEFLATE text/javascript
  AddOutputFilterByType DEFLATE text/plain
  AddOutputFilterByType DEFLATE text/xml
</IfModule>

# Configuração para Brotli (se o módulo estiver disponível)
<IfModule mod_brotli.c>
  AddOutputFilterByType BROTLI_COMPRESS application/javascript
  AddOutputFilterByType BROTLI_COMPRESS application/json
  AddOutputFilterByType BROTLI_COMPRESS application/x-javascript
  AddOutputFilterByType BROTLI_COMPRESS application/xml
  AddOutputFilterByType BROTLI_COMPRESS text/css
  AddOutputFilterByType BROTLI_COMPRESS text/html
  AddOutputFilterByType BROTLI_COMPRESS text/javascript
  AddOutputFilterByType BROTLI_COMPRESS text/plain
  AddOutputFilterByType BROTLI_COMPRESS text/xml
</IfModule>

# Configurações de cache para diferentes tipos de arquivo
<IfModule mod_expires.c>
  ExpiresActive On

  # Arquivos estáticos imutáveis (cache por 1 ano)
  ExpiresByType image/jpeg "access plus 1 year"
  ExpiresByType image/png "access plus 1 year"
  ExpiresByType image/svg+xml "access plus 1 year"
  ExpiresByType image/webp "access plus 1 year"
  ExpiresByType image/avif "access plus 1 year"
  ExpiresByType application/javascript "access plus 1 year"
  ExpiresByType text/css "access plus 1 year"
  ExpiresByType font/woff "access plus 1 year"
  ExpiresByType font/woff2 "access plus 1 year"

  # HTML, XML, JSON (cache por 1 hora)
  ExpiresByType text/html "access plus 1 hour"
  ExpiresByType application/xml "access plus 1 hour"
  ExpiresByType application/json "access plus 1 hour"
</IfModule>

# Suporte para servir arquivos pré-comprimidos
<IfModule mod_headers.c>
  # Para conteúdo Brotli
  <FilesMatch "\.br$">
    Header append Content-Encoding br
    Header append Vary "Accept-Encoding"
    RemoveType .br
    AddType "text/html" .html.br
    AddType "text/css" .css.br
    AddType "application/javascript" .js.br
    AddType "image/svg+xml" .svg.br
    AddType "application/json" .json.br
  </FilesMatch>

  # Para conteúdo Gzip
  <FilesMatch "\.gz$">
    Header append Content-Encoding gzip
    Header append Vary "Accept-Encoding"
    RemoveType .gz
    AddType "text/html" .html.gz
    AddType "text/css" .css.gz
    AddType "application/javascript" .js.gz
    AddType "image/svg+xml" .svg.gz
    AddType "application/json" .json.gz
  </FilesMatch>
</IfModule>

# Redireciona para HTTPS se disponível
<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteCond %{HTTPS} off
  RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
</IfModule>

# Configurações de segurança adicionais
<IfModule mod_headers.c>
  Header set X-XSS-Protection "1; mode=block"
  Header set X-Frame-Options "DENY"
  Header set X-Content-Type-Options "nosniff"
  Header set Referrer-Policy "no-referrer-when-downgrade"
  Header set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
</IfModule>

# Prevenir listagem de diretórios
Options -Indexes

# Se o recurso não existir, tentar servir a versão pré-comprimida
<IfModule mod_rewrite.c>
  RewriteEngine On

  # Verificar Brotli
  RewriteCond %{HTTP:Accept-Encoding} br
  RewriteCond %{REQUEST_FILENAME}.br -f
  RewriteRule ^(.*)$ $1.br [L]

  # Verificar Gzip
  RewriteCond %{HTTP:Accept-Encoding} gzip
  RewriteCond %{REQUEST_FILENAME}.gz -f
  RewriteRule ^(.*)$ $1.gz [L]
</IfModule> 